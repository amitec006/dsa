package org.example.binarysearch;

public class FindPeakElement {
    /**
     * Given an array of integers A, find and return the peak element in it.
     * An array element is considered a peak if it is not smaller than its neighbors. For corner elements, we need to consider only one neighbor.
     *
     * NOTE:
     *
     * It is guaranteed that the array contains only a single peak element.
     * Users are expected to solve this in O(log(N)) time. The array may contain duplicate elements.
     */
    public static void main(String[] args) {
        int[] A = {23,82,107,118,128,135,159,160,167,178,189,265,314,363,398,414,465,497,521,595,615,620,633,650,666,685,700,712,713,753,760,791,797,824,842,854,867,875,887,920,929,987,1022,1040,1089,1091,1118,1121,1218,1253,1275,1323,1356,1387,1404,1462,1549,1566,1572,1573,1595,1618,1633,1676,1692,1696,1727,1728,1744,1747,1781,1835,1862,1940,1951,1978,1992,2002,2027,2042,2043,2073,2101,2133,2141,2150,2171,2180,2209,2231,2308,2311,2315,2325,2340,2347,2399,2410,2422,2431,2450,2479,2491,2497,2529,2638,2668,2683,2686,2720,2753,2777,2805,2855,2856,2871,2884,2891,2943,2946,2950,3044,3056,3064,3069,3088,3102,3123,3124,3145,3158,3182,3190,3233,3297,3369,3372,3388,3390,3490,3493,3513,3518,3592,3626,3636,3651,3673,3674,3676,3718,3719,3754,3767,3775,3783,3791,3798,3822,3840,3876,3903,3944,3956,3963,3965,4025,4053,4081,4085,4090,4108,4142,4155,4160,4179,4272,4294,4303,4334,4339,4344,4360,4368,4385,4413,4414,4464,4473,4509,4513,4536,4571,4640,4700,4705,4776,4786,4810,4813,4820,4823,4848,4858,4930,4943,4947,4965,4966,4983,5019,5056,5062,5118,5141,5165,5200,5259,5268,5325,5335,5384,5450,5464,5471,5526,5554,5572,5605,5608,5611,5648,5649,5669,5688,5738,5739,5773,5779,5808,5821,5826,5861,5900,5904,5905,5916,5926,5983,5994,6028,6038,6061,6072,6095,6140,6143,6161,6190,6228,6240,6314,6325,6354,6389,6397,6427,6475,6490,6491,6507,6609,6613,6646,6660,6669,6673,6718,6732,6760,6916,6937,7014,7027,7080,7085,7094,7179,7186,7222,7242,7323,7353,7381,7402,7421,7448,7450,7479,7490,7524,7552,7620,7668,7682,7738,7741,7770,7780,7784,7800,7806,7812,7819,7823,7858,7894,7900,7945,7961,8030,8044,8051,8114,8125,8176,8178,8182,8187,8207,8224,8255,8294,8304,8307,8310,8313,8383,8397,8429,8432,8566,8588,8590,8594,8615,8619,8622,8629,8634,8635,8644,8648,8657,8662,8697,8707,8709,8770,8777,8783,8787,8802,8810,8826,8877,8893,8910,8920,8973,8989,8991,9029,9034,9100,9127,9130,9151,9152,9153,9162,9191,9293,9322,9331,9390,9402,9433,9456,9497,9507,9551,9552,9607,9652,9703,9730,9734,9741,9747,9794,9796,9813,9838,9901,9962,9934,9922,9920,9875,9866,9850,9736,9693,9682,9584,9567,9522,9415,9412,9411,9399,9324,9320,9305,9211,9145,9140,9122,9110,9085,9012,9010,9009,9000,8940,8935,8859,8855,8802,8797,8714,8684,8624,8621,8589,8463,8437,8375,8316,8291,8279,8241,8199,8162,8145,8123,7958,7815,7749,7746,7724,7676,7641,7551,7546,7531,7506,7332,7281,7160,7111,7076,7074,7001,6968,6967,6966,6927,6921,6890,6879,6876,6857,6743,6740,6734,6709,6670,6666,6663,6660,6630,6610,6513,6432,6419,6418,6400,6368,6361,6295,6272,6222,6213,6058,6045,6019,6002,5999,5909,5904,5881,5873,5842,5840,5815,5792,5755,5754,5691,5654,5596,5546,5541,5534,5528,5494,5480,5457,5430,5407,5391,5358,5356,5311,5293,5264,5152,5135,5114,5069,5056,5020,5010,4997,4977,4973,4966,4913,4896,4893,4795,4769,4763,4739,4694,4674,4514,4457,4426,4381,4378,4371,4368,4336,4333,4331,4327,4305,4260,4222,4197,4161,4155,4076,4047,4023,4014,4001,3985,3954,3934,3915,3907,3877,3752,3725,3690,3621,3617,3607,3556,3542,3527,3495,3459,3330,3320,3299,3268,3254,3248,3242,3233,3213,3146,3129,3114,3086,3073,3068,3034,3031,2936,2918,2841,2801,2750,2678,2667,2620,2558,2540,2465,2460,2433,2422,2382,2348,2347,2333,2281,2213,2198,2194,2193,2190,2168,2165,2110,2085,2063,2055,2024,1973,1899,1892,1879,1836,1810,1782,1780,1635,1634,1623,1618,1611,1604,1584,1540,1497,1427,1372,1361,1352,1338,1335,1309,1285,1277,1254,1214,1210,1184,1116,934,917,829,805,794,793,775,764,704,684,674,670,655,651,638,600,494,486,467,459,442,417,358,357,353,317,273,242,234,225,200,194,177,141,112,83};
        System.out.println(new FindPeakElement().solve(A));
    }

    public int solve(int[] A) {
        int low = 0;
        int high = A.length - 1;
        if (high == 0 || A[0] > A[1]) {
            return A[0];
        }
        if (A[high] > A[high-1]) {
            return A[high];
        }
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (A[mid] > A[mid+1] && A[mid] > A[mid-1]) {
                return A[mid];
            } else if (A[mid] > A[mid-1]){
                low = mid + 1;
            } else {
                high = mid -1;
            }
        }
        return A[low];
    }
}
