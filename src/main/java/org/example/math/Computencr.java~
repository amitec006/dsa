package org.example.math;

public class Computencr {

    /**
     * Given three integers A, B, and C,
     * where A represents n, B represents r, and C represents m,
     * find and return the value of nCr % m where nCr % m = (n!/((n-r)!*r!))% m.
     *
     *
     *
     *
     * x! means factorial of x i.e. x! = 1 * 2 * 3... * x.
     */

    public static void main(String[] args) {

    }

    static int modInverse(int a, int m) {
        return power(a, m - 2, m); // Fermat's Little Theorem
    }

    static int power(int x, int y, int m) {
        int result = 1;
        x = x % m;
        while (y > 0) {
            if ((y & 1) == 1) result = (result * x) % m;
            y = y >> 1;
            x = (x * x) % m;
        }
        return result;
    }

    public static int nCrModM(int A, int B, int C) {
        if (B > A) return 0;
        int[] fact = new int[A + 1];
        fact[0] = 1;

        // Compute factorials modulo C
        for (int i = 1; i <= A; i++) {
            fact[i] = (int) ((fact[i - 1] * (long) i) % C);
        }

        // Compute (r! * (n-r)!) % C
        int denominator = (int) ((fact[B] * (long) fact[A - B]) % C);

        // Compute modular inverse
        int denominatorInverse = modInverse(denominator, C);

        // Compute final result: (n! * inverse(denominator)) % C
        return (int) ((fact[A] * (long) denominatorInverse) % C);
    }

}
