package org.example.twopointer;

import java.util.ArrayList;

public class SubArrayWithGivenSum {
    /**
     * Given an array of positive integers A and an integer B,
     * find and return first continuous subarray which adds to B.
     *
     * If the answer does not exist return an array with a single integer "-1".
     *
     * First sub-array means the sub-array for which starting index in minimum.
     */

    public static void main(String[] args) {
        int [] A = {9059,462,9924,5935,7949,5413,7231,8981,5593,2661,1576,1333,290,5045,3021,7458,6554,5454,5995,708,5817,127,5213,7329,6080,1118,1462,5498,3506,5236,8417,9043,105,1834,8618,7484,6846,3259,2684,7613,816,9961,926,6949,8355,6841,602,6091,3524,8690,5248,5260,2675,325,4757,111,1442,1396,6161,3297,38,6723,5446,1193,6387,511,156,9688,4332,6816,1011,9024,5910,9233,8336,5295,2544,9935,5690,5382,9863,1903,8764,2889,4832,8503,2367,4924,1909,1355,2084,3470,6974,908,97,521,3987,4068,6543,3162,9471,9765,8790,3332,4235,6448,1064,7146,48,5158,5947,326,1383,8036,7482,9564,8810,4914,2810,4431,1115,9992,5592,843,7822,6490,9836,5020,2426,9656,7133,6386,9358,7537,3855,8916,4461,4507,7343,3069,9589,4718,1803,4623,6855,1351,5221,2501,6954,2839,8419,4970,9083,9051,6121,2482,6984,8883,7776,5869,6825,5618,2822,602,7834,7994,1039,1377,5845,2987,3699,6445,3274,994,5334,7762,6413,5298,9122,1315,2405,5509,1097,1766,3757,8999,9737,6959,7854,5259,7800,761,2561,5596,2733,7205,6707,4593,438,4990,6024,369,4758,8982,933,7838,1640,4598,2468,2867,2589,1655,6571,5531,6815,6633,5033,7515,5207,6125,3414,2098,2192,9731,2428,5147,3408,7636,9476,2069,8150,6659,1289,8779,5569,8737,6972,4374,2717,7431,3111,9456,725,1351,9096,6810,2617,8181,1295,481,2564,9372,9327,5241,1759,3493,6292,850,496,5772,7548,4605,9539,2375,9375,1224,6412,631,9712,1293,3840,591,8023,8232,8273,9053,331,8973,6120,4519,8447,5462,4165,403,9535,2432,8462,4260,3251,1922,2945,2824,8962,6505,4979,6168,4740,1324,115,9467,3238,9658,2439,7512,6884,7987,57,5377,6306,4295,7518,8461,1449,7695,8263,6499,4353,8373,541,9083,6294,4324,9689,4725,9607,5369,8107,1562,6349,5556,1869,5446,1747,2195,9471,317,279,3505,3918,6547,6202,7121,4082,5232,8344,8578,5065,289,1069,2270,143,5677,9457,7377,8837,2023,6945,7766,6578,5533,7961,7982,1541,2189,6389,7100,3302,1895,3111,8421,6157,536,2315,5788,7164,2671,6797,6650,5301,4013,7034,7880,3447,751,7483,2870,9366,2275,6229,7409,5316,4962,904,7493,8489,7249,4615,4333,6084,483,504,582,9472,5708,2537,7053,1696,3939,3126,1083,1287,6295,5259,6064,3294,838,7979,6673,5306,4942,9226,5828,2263,5588,9369,7538,8879,5135,2023,4417,2628,6745,6212,9908,3400,1964,5315,3013,8194,2720,3834,7666,490,1404,2515,9835,4312,5628,6075,2849,2433,8773,5439,5546,6635,3470,8182,8367,5494,2822,6704,9738,1783,3351,3530,8758,7252,4382,7134,532,7262,932,9647,7293,1590,1028,9924,1901,541,3794,1583,264,7456,1709,5821,5748,9671,8933,3097,1764,52,7776,6084,8343,316,7061,8700,4783,5557,9358,2477,3163,6588,8926,2040,6945,3046,8537,6057,4723,5566,1325,8653,1697,9708,3267,9005,460,7888,3029,3573,8280,8021,8466,6277,242,9284,3300,6821,6294,6001,3253,6302,5571,451,8193,2276,3182,4164,5756,2527,3057,5137,2353,7933,5456,5336,9435,18,9219,8827,6493,8058,6979,5933,7383,3922,6200,2913,3242,254,121,9862,3534,9012,460,1723,6571,2936,8125,8655,2224,2089,9006,2301,2489,1225,9484,3986,66,1503,248,9314,1193,1774,7662,1196,6562,537,9044,9977,3388,9534,1974,4955,2413,3921,7993,6369,5950,1955,7944,703,6971,9232,9567,5026,4645,8647,7973,8001,8771,7442,6134,6203,4088,7002,5615,4412,5591,9358,7455,7671,7647,6775,9305,1068,2993,7232,7719,446,2473,9151,3846,3530,2778,3278,6681,6329,7371,8288,476,4100,5307,9374,1993,9633,3685,5858,8836,4188,2138,4689,2271,7990,1916,1580,6671,7903,7913,502,2993,9613,9247,5263,5559,460,2949,3974,9782,6905,5681,8368,3516,7576,474,5119,6152,8781,8989,5586,7778,4455,4960,3745,5284,6608,1160,9449,3590,5514,483,5616,7907,1126,1542,3481,7316,8481,577,9589,846,248,4385,1893,4699,8981,3509,9993,3319,108,964,6331,7581,4276,9428,1000,539,4250,8991,2687,4908,7250,8335,2256,6704,8343,4502,3482,6349,4312,313,7513,1938,286,3919,3819,9327,3318,1972,535,258,8118,6483,1431,2810,167,5539,5031,8134,576,9750,3812,3659,5189,9559,7872,5709,7723,3345,7957,3866,2969,2632,7347,5261,1502,8673,704,9504,1728,4145,725,3962,8604,4787,195,4692,908,8437,7864,518,549,3086,1465,6423,8082,1350,152,7753,8334,6070,1654,8547,8824,600,6504,5709,1561,7825,2870,5753,5680,3920,703,2326,4406,6436,3188,852,4858,1428,6821,1288,3320,1035,8813,1191,1790,1149,1995,9092,3848,8665,2902,2520,9176,9143,8301,5910,6442,8665,9061,1124,3661,8196,7993,7323,3656,4768,13,7547,9768,1501,8863,6492,3600,7603,4464,7726,2224,283,8979,8834,7047,2807,7649,9856,310,6814,2555,3779,8060,2434,3599,7807,368,6768,1221,679,536,9853,9597,4406,5100,7341,7439,8424,5541,843,5870,422,786,112,9334,861,6825,6071,5995,7551,6064,63,8682,2565,4395,2644,6045,6241,8392,4720,6338,2041,8526,4945,2971,1664,6835,9850,1831,1924,9107,7438,5240,3668,2306,670,6411,8257,7688,4631,1224,9013};
        ArrayList<Integer> list = new ArrayList<>(A.length);
        for (int i = 0; i < A.length; i++) {
            list.add(A[i]);
        }
        int B = 98894;

        System.out.println(new SubArrayWithGivenSum().solve(list, B));
    }

    public ArrayList<Integer> solve(ArrayList<Integer> A, int B) {
        int left = 0;
        int right  = 0;
        int size = A.size();
        int sum = 0;
        while (right < size) {
            sum += A.get(right);

            if (sum > B) {
                sum -= A.get(left);
                left++;
            }
            if (sum == B) {
                ArrayList<Integer> ans = new ArrayList<>();
                for (int i = left; i <= right; i++) {
                    ans.add(A.get(i));
                }
                return ans;
            }
            right++;
        }
        ArrayList<Integer> ans = new ArrayList<>();
        ans.add(-1);
        return ans;
    }
}
